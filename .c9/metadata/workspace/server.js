{"changed":true,"filter":false,"title":"server.js","tooltip":"/server.js","value":"var cors = require('cors'),express = require('express');\nvar express     = require('express');\nvar app         = express();\nvar bodyParser  = require('body-parser');\nvar morgan      = require('morgan');\nvar mongoose    = require('mongoose');\nvar async       = require('async');\nvar passport    = require('passport'); \n\n\nvar jwt         = require('jsonwebtoken'); \nvar config      = require('./config/main');\n//var passport      = require('./config/passport');\nvar AdminUser   = require('./app/models/adminuser');\nvar AppUser     = require('./app/models/appuser');\nvar Vehicle     = require('./app/models/vehicle');\nvar Log         = require('./app/models/log');\nvar User        = require('./app/models/user');   \n\n\n\n\n\n\nvar token_expiration = 86000;\n\n// Get Queue Route\nvar total, limit, offset, returned;\n\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\"+(\"0\" +(currentdate.getMonth()+1)).slice(-2) \n+ \"-\" + (\"0\" +(currentdate.getDay()+1)).slice(-2) + \" \" \n+ currentdate.getHours() + \":\" \n+ currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nvar port = process.env.PORT || 8080; // used to create, sign, and verify tokens\nmongoose.connect(config.database); // connect to database\napp.set('mockapisecret', config.secret); // secret variable\napp.set('mockapirefreshsecret', config.refresh_secret); // refresh token secret variable\n\n// use body parser so we can get info from POST and/or URL parameters\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n// use morgan to log requests to the console\napp.use(morgan('dev'));\n\napp.use(passport.initialize());  \nrequire('./config/passport')(passport); \n\napp.use(function (req, res, next) {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n\n    // Pass to next layer of middleware\n    next();\n});\n\napp.use(cors());\n\n// basic route\napp.get('/', function(req, res) {\n    res.send('The Mock API is at http://localhost:' + port + '/api');\n});\n\n\n// start the server ======\n\napp.listen(port);\nconsole.log('Local Mock CWX API Server starts at http://localhost:' + port);\n\n\n// get an instance of the router for api routes\nvar apiRoutes = express.Router(); \n\n\n// Route to authenticate a user (POST http://localhost:8080/api/oauth/token)\napiRoutes.post('/oauth/token', function(req, res) {\n  console.log('Get Aunthentication Token');\n  // find the uuid\n  AdminUser.findOne({\n    initial_password: req.body.initial_password\n  }, function(err, user) {\n    //console.log(initial_password);\n    if (err) {\n      console.log(err);\n       throw err;\n    }\n    if (!user) {\n      //console.log(res);\n      res.status(401).json({ message: 'Invalid User', code: 100000 });\n    } else if (user) {\n      console.log('GetToken');\n        \n           console.log(user.initial_password); \n           console.log(req.body.initial_password);\n          // check if password matches\n          if (user.initial_password != req.body.initial_password) {\n            res.status(400).json({ success: false, message: 'Authentication failed. Wrong password.' });\n          } else {\n            console.log('Creating Token')\n            // create a token\n            var expiration = token_expiration;\n            var token = jwt.sign(user, app.get('mockapisecret'), {\n              expiresIn: expiration // expires token\n            });\n            var refresh_token = user.refresh_token;\n\n\n            console.log('My Token Expiration : ' + expiration);\n            //console.log('Access Token:' + token);\n            //console.log('Refresh Token:' + refresh_token);\n            // return the information including token as JSON\n            res.status(200).json({\n              message: 'Device Is Authorized To Use The App!',\n              'access_token': token,\n              username: user.username,\n              token_type: 'bearer',\n              expires_in: expiration,\n              'refresh_token': refresh_token\n            });\n          } \n    }\n\n  });\n});\n\n\n// Register new users\napiRoutes.post('/register', function(req, res) {  \n  if(!req.body.email || !req.body.password) {\n    res.json({ success: false, message: 'Please enter email and password.' });\n  } else {\n    var newUser = new User({\n      email: req.body.email,\n      password: req.body.password\n    });\n\n    // Attempt to save the user\n    newUser.save(function(err) {\n      if (err) {\n        return res.json({ success: false, message: 'That email address already exists.'});\n      }\n      res.json({ success: true, message: 'Successfully created new user.' });\n    });\n  }\n});\n\n// Route middleware to verify a token\napiRoutes.use(function(req, res, next) {\n  //console.log(req.headers); \n  // check header or url parameters or post parameters for token\n  var token = req.headers['authorization'];\n \n\n  // decode token\n  if (token) {\n    console.log('Inside Token Check');\n    // verifies secret and checks exp\n    jwt.verify(token, app.get('mockapisecret'), function(err, decoded) {      \n      if (err) {\n        console.log(err);\n        return res.status(500).json({ success: false, message: 'Failed to authenticate token.', code: 10088  });    \n      } else {\n        // if everything is good, save to request for use in other routes\n        console.log('Token Accepted');\n        req.decoded = decoded;  \n       //console.log(decoded)  ;\n        next();\n      }\n    });\n\n  } else {\n\n    // if there is no token\n    // return an error\n    return res.status(403).send({ \n        success: false, \n        message: 'No token provided on API Call.'\n    });\n    \n  }\n});\n\n\napiRoutes.get('/dashboard', passport.authenticate('jwt', { session: true }), function(req, res) { \n\tconsole.log(res); \n  res.send('It worked! User id is: ' + req.user._id + '.');\n});\n\n// Device Registration Route (POST http://localhost:8080/api/v2/device/registration)\napiRoutes.post('/v2/admin/login', function(req, res) {\n console.log('Admin Login Endpoint');\n  // find the uuid\n  AdminUser.findOne({\n    initial_password: req.body.initial_password\n  }, function(err, user) {\n\n    if (err) {\n      console.log(err);\n       throw err;\n    }\n    if (!user) {\n      console.log(res);\n      res.status(401).json({ message: 'Unauthorized User', code: 100001 });\n    } else if (user) {\n      console.log(user);\n      if((req.body.username != user.username)||(req.body.password != user.password)){\n        res.status(402).json({ message: 'Invalid Credentials!!!.', code: 10112 });\n      }else{\n        res.status(200).json({ \n          'message': 'User is authorized to use the admin panel',\n          \n\n        });\n      }\n    }\n\n  });\n});\n \n// Insert Vehcile Route (POST http://localhost:8080/api/v2/device/passcode)\napiRoutes.post('/v2/admin/vehicle', function(req, res) {\n console.log('Input Vehicle Details');\n  // find the uuid\n  AdminUser.findOne({\n    auth_key: req.headers['x-auth-key']\n  }, function(err, user) {\n\n    if (err) {\n      console.log(err);\n       throw err;\n    }\n\n    if (!user) {\n      //console.log(res);\n      res.status(401).json({ message: 'Unauthorized User Access', code: 100002 });\n    } else if (user) {\n      \n        console.log('Issued By : ' + req.body.issuedby);\n        console.log('Company : ' + req.body.company);\n        console.log('Plate No. : ' + req.body.plateno);\n        console.log('Brand : ' + req.body.brand);\n\n       \n\n        \tvar vehicleinfo = new Vehicle({\n            auth_key: req.headers['x-auth-key'],\n                     \n                plateno: req.body.plateno,\n                brand: req.body.brand,\n                model: req.body.model,\n                year_model: req.body.year_model,\n                transmission: req.body.transmission,\n                color_engine_fuel: req.body.color_engine_fuel,\n                acquisition_date: req.body.acquisition_date,\n                company: req.body.company,\n                custodian : req.body.custodian,\n                department: req.body.department,\n                registered_owner: req.body.registered_owner,\n                previous_assignee: req.body.previous_assignee,\n                remarks: req.body.remarks,\n                actual_mileage: req.body.actual_mileage,\n                renewal: req.body.renewal,\n                \n\t\t        datecreated: currentdate\n\t\t    });\n\n\t\t      // save the user\n\t\t    vehicleinfo.save(function(err) {\n\t\t        if (err) throw err;\n\n\t\t        console.log('Vehicle Info Saved Successfully');\n                var loginfo = new Log({\n                    datetime: datetime,\n                    user: req.body.username\n                })\n\n                //save log\n                loginfo.save(function(err) {\n                    if (err) throw err;\n                    \n                    res.status(200).json({ \n                      'message': 'Vehicle info set successfully.'\n                    });\n                })\n\t\t        \n\t\t    });\n        \n    }\n\n  });\n});\n\n// Get Vehcile Route (POST http://localhost:8080/api/v2/device/passcode)\napiRoutes.get('/v2/admin/vehicle', function(req, res) {\n    var jsonData=[];\n console.log('Get Vehicle Details');\n  // find the uuid\n  AdminUser.findOne({\n    auth_key: req.headers['x-auth-key']\n  }, function(err, user) {\n\n    if (err) {\n      console.log(err);\n       throw err;\n    }\n\n    if (!user) {\n      //console.log(res);\n      res.status(401).json({ message: 'Unauthorized User Access', code: 100002 });\n    } else if (user) {\n        console.log(datetime);\n        console.log('Vehicle Info Saved Successfully');\n\n        Vehicle.find({ auth_key: req.headers['x-auth-key'] }).cursor()\n        .on('data', function(vehicles){                    \n            jsonData.push(vehicles);\n        })\n        .on('error', function(err){\n          \n        })\n        .on('end', function(){\n          console.log(\"Vehicle Data Retrieved\");\n          //var vehicleData = { data: jsonData };\n          res.status(200).json(jsonData);\n\n          /*\n          res.writeHead(200, {'Content-Type': 'application/json'});\n            res.write(jsonData);\n          res.end();\n\n          /*\n          res.status(200).json({\n               \n              'message': 'Queue retrieved successfully',\n              'code': '200010'\n          });\n          */\n        });\n            \n\t\t       // res.status(200).json({ \n\t\t       //   'message': 'Vehicle info set successfully.',\n\t\t       //   'data': user\n\t\t       // });\n\t\t   \n       \n     \n    }\n\n  });\n});\n\n// Get Individual Vehicle Info\napiRoutes.get('/v2/admin/vehicle/:plateno', function(req, res) {\n  console.log('<----- Get Individual Vehicle ----->');\n  var jsonData=[];\n  AdminUser.findOne({\n    auth_key: req.headers['x-auth-key']\n  }, function(err, user) {\n\n    if (err) {\n      console.log(err);\n       throw err;\n    }\n\n    if (!user) {\n      //console.log(res);\n      res.status(401).json({ message: 'Unauthorized User Access', code: 100002 });\n    } else if (user) {\n        //console.log(datetime);\n        //console.log('Vehicle Info Saved Successfully');\n\n        Vehicle.find({ plateno: req.params.plateno }).cursor()\n        .on('data', function(vehicles){                    \n            jsonData.push(vehicles);\n        })\n        .on('error', function(err){\n          \n        })\n        .on('end', function(){\n          console.log(\"Individual Vehicle Data Retrieved\");\n          //var vehicleData = { data: jsonData };\n          res.status(200).json(jsonData);\n\n          /*\n          res.writeHead(200, {'Content-Type': 'application/json'});\n            res.write(jsonData);\n          res.end();\n\n          /*\n          res.status(200).json({\n               \n              'message': 'Queue retrieved successfully',\n              'code': '200010'\n          });\n          */\n        });\n            \n           // res.status(200).json({ \n           //   'message': 'Vehicle info set successfully.',\n           //   'data': user\n           // });\n       \n       \n     \n    }\n\n  });\n});\n\n// apply the routes to our application with the prefix /api\napp.use('/api', apiRoutes);","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":5018,"scrollleft":0,"selection":{"start":{"row":367,"column":18},"end":{"row":367,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":357,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1500710505268}